
fanc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002b  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000008a  00000000  00000000  00000169  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000056  00000000  00000000  000001f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000c6  00000000  00000000  00000249  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000078  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__vector_13>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d1 e0       	ldi	r29, 0x01	; 1
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea ec       	ldi	r30, 0xCA	; 202
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a0 36       	cpi	r26, 0x60	; 96
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a0 e6       	ldi	r26, 0x60	; 96
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a0 36       	cpi	r26, 0x60	; 96
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	18 d0       	rcall	.+48     	; 0x86 <main>
  56:	37 c0       	rjmp	.+110    	; 0xc6 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <__vector_13>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>

ISR( ADC_vect)
{
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
  64:	8f 93       	push	r24
  66:	ef 93       	push	r30
  68:	ff 93       	push	r31
    OCR0A = ADCH;                   // Copy ADC result to Output Compare A
  6a:	e5 e2       	ldi	r30, 0x25	; 37
  6c:	f0 e0       	ldi	r31, 0x00	; 0
  6e:	80 81       	ld	r24, Z
  70:	86 bf       	out	0x36, r24	; 54
    OCR0B = ADCH;                   // Copy ADC result to Output Compare B
  72:	80 81       	ld	r24, Z
  74:	8c bf       	out	0x3c, r24	; 60
}
  76:	ff 91       	pop	r31
  78:	ef 91       	pop	r30
  7a:	8f 91       	pop	r24
  7c:	0f 90       	pop	r0
  7e:	0f be       	out	0x3f, r0	; 63
  80:	0f 90       	pop	r0
  82:	1f 90       	pop	r1
  84:	18 95       	reti

00000086 <main>:

int main( void )
{
  86:	e7 e3       	ldi	r30, 0x37	; 55
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	80 83       	st	Z, r24

    DDRB    |= _BV(PORTB0) +
               _BV(PORTB1);         // Set PB.0 and PB.1 as output

    CLKPR   = _BV(CLKPCE);          // Set Clock Prescalar Change Enable flag
  90:	e6 e4       	ldi	r30, 0x46	; 70
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 e8       	ldi	r24, 0x80	; 128
  96:	80 83       	st	Z, r24
    CLKPR   = 0;                    // ... and set the Clock Prescalar to zero
  98:	10 82       	st	Z, r1
                                    // ... for 9.6MHz system clock frequency

    TCCR0A  = 0xE3;                 // COM0A1:0 = 3     Set OC0A on compare match, clear OC0A at TOP
  9a:	83 ee       	ldi	r24, 0xE3	; 227
  9c:	80 bf       	out	0x30, r24	; 48
                                    // COM0B1:0 = 2     Clear OC0B on compare match, set OC0B at TOP
                                    // WGM01:00 = 3     Mode 3, Fast PWM

    TCCR0B  = 0x01;                 // WGM02    = 0
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	83 bf       	out	0x33, r24	; 51
                                    // CS02:00  = 1     Clock running, No prescalar
                                    //                  => PWM frequency 37.5kHz (9.6Mhz/256)

    ADMUX   = _BV(ADLAR) + 1;       // REFS0    = 0     Vcc used as reference
  a2:	81 e1       	ldi	r24, 0x11	; 17
  a4:	87 b9       	out	0x07, r24	; 7
                                    // ADLAR    = 1     Left adjust ADC result
                                    // MUX1:0   = 1     Use input ADC1 (PB2)

    ADCSRA  = _BV(ADEN)     +       // ADEN     = 1     ADC Enable
  a6:	8e ee       	ldi	r24, 0xEE	; 238
  a8:	86 b9       	out	0x06, r24	; 6
              _BV(ADATE)    +       // ADATE    = 1     ADC Auto Trigger Enable
              _BV(ADIE)     +       // ADIE     = 1     ADC Interrupt Enable
              6;                    // ADPS2:0  = 6     Divide by 64 prescalar
                                    //                  => ADC clock = 9.6Mhz/64 = 150 kHz

    sei();                          // Enable Interrupts
  aa:	78 94       	sei
    while(1)
    {
        // All processing is handle by the ADC interrupt
        // Nothing to do here so just sleep

        set_sleep_mode( SLEEP_MODE_IDLE );
  ac:	e5 e5       	ldi	r30, 0x55	; 85
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	87 7e       	andi	r24, 0xE7	; 231
  b4:	80 83       	st	Z, r24
        sleep_mode();
  b6:	80 81       	ld	r24, Z
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	80 83       	st	Z, r24
  bc:	88 95       	sleep
  be:	80 81       	ld	r24, Z
  c0:	8f 7d       	andi	r24, 0xDF	; 223
  c2:	80 83       	st	Z, r24
  c4:	f5 cf       	rjmp	.-22     	; 0xb0 <main+0x2a>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
